#include <stdio.h>
#include<string.h>
#include<math.h>
#include<time.h>

void create_random(int lines,int range, int *random)//生成随机数,lines表示生成的个数，range表示生成的范围
{
	int i = 0, j = 0;
	int a;//用来生成随机数
	int k = 0;
	int target;//用来标识新的随机数是否重复

	srand((unsigned)time(0));

	//printf("\n");
	while (i < lines )
	{
		a = rand() % (range);
		for (j = 0; j < lines ; j++)
		{
			target = 0;
			if (random[j] == a)break;
			else if (random[j] > a)continue;
			else if (random[j] < a) {
				for (k = i; k > j; k--)
				{
					random[k] = random[k - 1];//从大到小排列
				}
				random[j] = a;
				target = 1;
				break;
			}
		}
		if (target)i++;
	}
	/*for (i = 0; i < lines / 5 ; i++)
	{
		printf("%d ", random[i]);
	}*/
}




float str2num(char * s)//字符串转浮点数
{
	if (!s)return -1;
	float a = 0, b = 0;
	int i = 0;
	while (s[i] != '.'&&s[i] != '\0')
	{
		a = a * 10 + (s[i] - '0');
		i++;
	}
	if (s[i] == '.')
	{
		i++;
		int x = -1;
		while (s[i] != '\0')
		{
			b += (s[i] - '0')*pow(10, x);
			x--;
			i++;
		}
		a += b;
	}
	return a;
}


void _a_(float _auto_2[400][8], int lines)//a小题的泛化误差
{
	int i, j;
	printf("进行100次试验\n");
	double mpg_wucha_all = 0;
	for (j = 0; j < 100; j++)
	{
		int random_s[90] = { 0 };
		create_random(lines/5,lines, random_s);
		double mpg_wucha = 0;
		for (i = 0; i < lines / 5; i++)
		{
			mpg_wucha += pow((_auto_2[random_s[i]][3] * (-0.15) + 40) - _auto_2[random_s[i]][0], 2);
		}
		mpg_wucha /= (lines / 5);
		mpg_wucha_all += mpg_wucha;
		//printf("\n误差：%lf", mpg_wucha);
	}
	printf("a题泛化误差为：%lf\n", mpg_wucha_all / 100);
}

void _b_(float _auto_2[400][8], int lines)
{
	int i, j;
	printf("进行p=10次划分\n");
	/*for (j = 0; j < 10; j++)
	{
		int random_s[20] = { 0 };
		create_random(lines/20,lines, random_s);
		double mpg_wucha = 0;
		for (i = 0; i < lines / 20; i++)
		{
			mpg_wucha += pow((_auto_2[random_s[i]][3] * (-0.15) + 40) - _auto_2[random_s[i]][0], 2);
		}
		mpg_wucha /= (lines / 20);
		mpg_wucha_all += mpg_wucha;
		//printf("\n误差：%lf", mpg_wucha);
	}
	*/
	double mpg_wucha = 0;
	for (i = 0; i < lines; i++)
	{
		mpg_wucha += pow((_auto_2[i][3] * (-0.15) + 40) - _auto_2[i][0], 2);
	}
	printf("书本k折泛化误差为：%lf\n", mpg_wucha / lines);
}
void _b1_(float _auto_2[400][8], int lines)
{
	int i, j;
	printf("进行k=20次划分\n");
	double mpg_wucha_all = 0;
	for (j = 0; j < 20; j++)
	{
		int random_s[10] = { 0 };
		create_random(10, lines, random_s);
		double mpg_wucha = 0;
		for (i = 0; i < 10; i++)
		{
			mpg_wucha += pow((_auto_2[random_s[i]][3] * (-0.15) + 40) - _auto_2[random_s[i]][0], 2);
		}
		mpg_wucha /= 10;
		mpg_wucha_all += mpg_wucha;
		//printf("\n误差：%lf", mpg_wucha);
	}
	printf("老师ppt留p法：泛化误差为：%lf\n", mpg_wucha_all / 20);
}

void _c_(float _auto_2[400][8], int lines)//c题的泛化误差
{
	int i, j;

	//首先得对mpg排序
	float _mpg01[400][2] = { 0 };
	for (i = 1; i < lines; i++)//第一位留出来方便排序
	{
		_mpg01[i][0] = _auto_2[i][0];
		_mpg01[i][1] = _auto_2[i][4];
	}
	//插入排序法,从大到小排序
	int t;
	for (i = 2; i < lines; i++)
	{
		if (_mpg01[i][0] > _mpg01[i - 1][0])
		{
			_mpg01[0][0] = _mpg01[i][0];
			_mpg01[0][1] = _mpg01[i][1];// 复制为监视哨
			for (j = i - 1; _mpg01[0][0] > _mpg01[j][0]; --j)
			{
				_mpg01[j + 1][0] = _mpg01[j][0];
				_mpg01[j + 1][1] = _mpg01[j][1];
			}// 记录后移
			_mpg01[j + 1][0] = _mpg01[0][0];  
			_mpg01[j + 1][1] = _mpg01[0][1];// 插入到正确位置

		}
	}

	printf("进行100次试验\n");
	double mpg_wucha_all = 0;
	int mpg01 = 0;
	for (j = 0; j < 100; j++)
	{
		int random_s[90] = { 0 };
		create_random(lines / 5, lines, random_s);
		double mpg_wucha = 0;
		for (i = 0; i < lines / 5; i++)
		{
			if (random_s[i] < lines/4)mpg01 = 1;
			else mpg01 = 0;
			mpg_wucha += pow(exp(_mpg01[random_s[i]][1] * (-0.01) + 3.85) /(1+ exp(_mpg01[random_s[i]][1] * (-0.01) + 3.85))-mpg01, 2);
		}
		mpg_wucha /= (lines / 5);
		mpg_wucha_all += mpg_wucha;
		//printf("\n误差：%lf", mpg_wucha);
	}
	printf("c题泛化误差为：%lf\n", mpg_wucha_all / 100);
}

void _d_(float _auto_2[400][8], int lines)//d题的泛化误差
{
	int i, j;

	//首先得对mpg排序
	float _mpg01[400][2] = { 0 };
	for (i = 1; i < lines; i++)//第一位留出来方便排序
	{
		_mpg01[i][0] = _auto_2[i][0];
		_mpg01[i][1] = _auto_2[i][4];
	}
	//插入排序法,从大到小排序
	int t;
	for (i = 2; i < lines; i++)
	{
		if (_mpg01[i][0] > _mpg01[i - 1][0])
		{
			_mpg01[0][0] = _mpg01[i][0];
			_mpg01[0][1] = _mpg01[i][1];// 复制为监视哨
			for (j = i - 1; _mpg01[0][0] > _mpg01[j][0]; --j)
			{
				_mpg01[j + 1][0] = _mpg01[j][0];
				_mpg01[j + 1][1] = _mpg01[j][1];
			}// 记录后移
			_mpg01[j + 1][0] = _mpg01[0][0];
			_mpg01[j + 1][1] = _mpg01[0][1];// 插入到正确位置

		}
	}

	printf("进行100次试验\n");
	double mpg_wucha_all = 0;
	int mpg01 = 0;
	int k = 0;
	for (j = 0; j < 100; j++)
	{
		int random_s1[20] = { 0 };
		int random_s[80] = { 0 };
		int m = (int)(lines / 20 + 0.5) + 1;
		create_random(m, lines / 4, random_s1);
		create_random(3 * m, 3 * (int)(lines / 4), random_s);
		for ( k = 0; k < 3*m; k++)
		{
			random_s[k] += (int)(lines / 4) + 1;
		}
		for (k = 3 * m; k < m*4; k++)
		{
			random_s[k] = random_s1[k - 3 * m];
		}
		double mpg_wucha = 0;
		for (i = 0; i < lines / 5; i++)
		{
			if (random_s[i] < lines/4)mpg01 = 1;
			else mpg01 = 0;
			mpg_wucha += pow(exp(_mpg01[random_s[i]][1] * (-0.01) + 3.85) / (1 + exp(_mpg01[random_s[i]][1] * (-0.01) + 3.85)) - mpg01, 2);
		}
		mpg_wucha /= (lines / 5);
		mpg_wucha_all += mpg_wucha;
		//printf("\n误差：%lf", mpg_wucha);
	}
	printf("d题泛化误差为：%lf\n", mpg_wucha_all / 100);
}


int main()
{
    int j = 0;
	int i = 0;
	

	//读取表格数据
	FILE *fp = NULL;
	char *line, *record;
	char buffer[1024];
	char* _auto[400][9] = { 0 };//存放字符串
	if ((fp = fopen("Auto.csv", "at+")) != NULL)
	{
		char delims[] = ",";
		char *result = NULL;

		while ((line = fgets(buffer, sizeof(buffer), fp)) != NULL)//当没有读取到文件末尾时循环继续
		{
			record = strtok(line, ",");
			while (record != NULL)//读取每一行的数据
			{
				_auto[i][j] = (char*)malloc(30 * sizeof(char));
				strcpy(_auto[i][j], record);
				//printf("%s ", _auto[i][j]);//将读取到的每一个数据打印出来
				record = strtok(NULL, ",");
				j++;
			}
			i++;
			//printf("\n");
			j = 0;

		}
		fclose(fp);
		fp = NULL;
	}
	

	//处理数据使之化为浮点数
	float _auto_2[400][8] = { 0 };
	int lines = i;
	for (i = 1; i < lines; i++)
	{
		for (j = 0; j < 8; j++)
		{
			_auto_2[i][j] = str2num(_auto[i][j]);
			//printf("%f ", _auto_2[i][j]);
		}
		//printf("\n");
	}

	//计算误差
	_a_(_auto_2, lines);//a题的误差
	_b_(_auto_2, lines);//b题的误差
	_b1_(_auto_2, lines);//b1?题的误差
	_c_(_auto_2, lines);//c题的误差
	_d_(_auto_2, lines);//c题的误差
	return 0;
}
